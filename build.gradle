import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.JsonReportRenderer

plugins {
    id 'com.palantir.docker' version '0.25.0' apply false
    id 'org.owasp.dependencycheck' version '8.4.0'
    id 'com.gorylenko.gradle-git-properties' version '2.4.1' apply false
    id 'com.github.jk1.dependency-license-report' version '2.5' apply false
    id 'de.undercouch.download' version '5.5.0' apply false
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.palantir.docker'
    apply plugin: 'com.github.jk1.dependency-license-report'
    apply plugin: 'de.undercouch.download'
    apply plugin: 'com.gorylenko.gradle-git-properties'

    ext {
        sharedDir                     = file("${project.rootDir}/shared")
        baseSailfishVersion           = '3.3'
        sailfishVersion               = "${baseSailfishVersion}.132"

        pluginMainDir                 = file('src/main/plugin')
        pluginGenDir                  = file('src/gen/plugin')
        versionFile                   = file("${pluginGenDir}/VERSION")
        dockerSailfishWorkspaceDir    = 'sailfish/workspace/plugins/th2_service'
        dockerSailfishWorkspaceLibDir = "${dockerSailfishWorkspaceDir}/libs"
    }

    ext.excludeSailfish = { rcd ->
        rcd.excludeModuleByRegex("com\\.exactpro\\.sf", ".*")
    }

    repositories {
        maven {
            name 'Sonatype_snapshots'
            url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            content {
                excludeSailfish(it)
            }
        }
        // ignoreGradleMetadataRedirection is used for sonatype because
        // Sailfish dependencies have constrains that interfere with our BOM
        // so we exclude Gradle metadata for this repositories.
        // We've checked these versions - they are compatible and safe to use
        maven {
            name 'Sonatype_snapshots'
            url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            metadataSources {
                mavenPom()
                artifact()
                ignoreGradleMetadataRedirection()
            }
        }
        maven {
            name 'Sonatype_releases'
            url 'https://s01.oss.sonatype.org/content/repositories/releases/'
            content {
                excludeSailfish(it)
            }
        }
        maven {
            name 'Sonatype_releases'
            url 'https://s01.oss.sonatype.org/content/repositories/releases/'
            metadataSources {
                mavenPom()
                artifact()
                ignoreGradleMetadataRedirection()
            }
        }
        mavenCentral()
        mavenLocal()

        configurations.configureEach {
            resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
            resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
        }
    }

    configurations {
        service {
            exclude module: 'sailfish-core'
            exclude module: 'sailfish-common'
        }
    }

    dependencies {
        service platform("com.exactpro.th2:bom:4.5.0") {
            because('we need to fource dependnecies without vulnerabilities')
        }
        service "com.exactpro.sf:${sf_service_name}:${sailfishVersion}"
    }

    gitProperties {
        // git properties will be put in a map at project.ext.gitProps
        // this is done to use in in the pluginWriteVersion task
        extProperty = 'gitProps'
    }
    // make sure the generateGitProperties task always executes (even when git.properties is not changed)
    generateGitProperties.outputs.upToDateWhen { false }

    def pluginWriteVersion = tasks.register("pluginWriteVersion") {
        dependsOn(generateGitProperties)

        outputs.file versionFile
        doLast{
            versionFile.write "lightweight: true\n" +
                              "plugin_alias: th2_service\n" +
                              "name: th2_service\n" +
                              "build_number: 0\n" +
                              "revision: 0\n" +
                              "git_hash: ${project.ext.gitProps['git.commit.id.abbrev']}\n" +
                              "branch: ${project.ext.gitProps['git.branch']}\n" +
                              "version: ${baseSailfishVersion}.0.0\n" +
                              "core_version: ${baseSailfishVersion}.0"
        }
    }

    dockerPrepare {
        dependsOn pluginWriteVersion
    }

    docker {
        copySpec.with {
            from(configurations.service) {
                into dockerSailfishWorkspaceLibDir
            }
            from(pluginMainDir) {
                into dockerSailfishWorkspaceDir
            }
            from(pluginGenDir) {
                into dockerSailfishWorkspaceDir
            }
        }
    }

    clean {
        delete(pluginGenDir)
    }

    licenseReport {
        def licenseNormalizerBundlePath = "$buildDir/license-normalizer-bundle.json"

        if (!file(licenseNormalizerBundlePath).exists()) {
            download.run {
                src 'https://raw.githubusercontent.com/th2-net/.github/main/license-compliance/gradle-license-report/license-normalizer-bundle.json'
                dest "$buildDir/license-normalizer-bundle.json"
                overwrite false
            }
        }

        configurations = ['runtimeClasspath', 'service']

        filters = [
                new LicenseBundleNormalizer(licenseNormalizerBundlePath, false)
        ]
        renderers = [
                new JsonReportRenderer('licenses.json', false),
        ]
        excludeOwnGroup = false
        allowedLicensesFile = new URL("https://raw.githubusercontent.com/th2-net/.github/main/license-compliance/gradle-license-report/allowed-licenses.json")
    }
}

dependencyCheck {
    formats=['SARIF', 'JSON', 'HTML']
    failBuildOnCVSS=5

    analyzers {
        assemblyEnabled = false
        nugetconfEnabled = false
        nodeEnabled = false
    }
}